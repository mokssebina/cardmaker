//////////////---React imports---////////////////////
import React, { Fragment, useEffect, useState } from 'react';

//////////////---Headless ui imports---////////////////////
import { Button, Switch, Input } from '@headlessui/react';
import clsx from 'clsx';

//////////////---Material UI imports---///////////////
import { Skeleton, CircularProgress, Divider } from '@mui/material';

//////////////---Yup imports---////////////////////
import * as Yup from 'yup';

//////////////---Formik imports---////////////////////
import { useFormik } from 'formik';

//////////////---Formik imports---////////////////////
import { useDispatch, useSelector } from 'react-redux';

//////////////---Context imports---////////////////////
import { useAuth } from '../../Context/AuthContext';

//////////////---New card screen imports---////////////////////
import TemplateHolder from '../../Components/ScreenElements/TemplateElements/TemplateHolder';
import PreviewHolder from '../../Components/ScreenElements/PreviewElements/PreviewHolder';
import CardLayoutForm from '../../Components/ScreenElements/CardLayoutForm/CardLayoutForm';
import CardPreview from './CardPreview';

//////////////---Data imports---////////////////////
import { messages } from '../../Components/ScreenElements/MessagePage/Messages/Messages';

//////////////---Asset imports---////////////////////
import Day from '../../Assets/Day.png'
import Night from '../../Assets/Night.png';

//////////////---Icon imports---////////////////////
import { CopyAllOutlined } from '@mui/icons-material';

//////////////---Clipboard imports---////////////////////
import clipboard from 'clipboardy';

//////////////---Toast imports---////////////////////
import { toast } from 'react-hot-toast';

//////////////---API imports---////////////////////
import { fetchCards } from '../Slices/GetCardsSlice';
import { getCardMessages } from '../Slices/GetMessagesSlice';
import { updateCardMessage } from '../Slices/UpdateMessageSlice';
import { fontList } from '../../Components/ScreenElements/CardLayoutForm/FontList';






const NewCard = () => {

    const { session, preview, togglePreview } = useAuth()
    const dispatch = useDispatch()
    const { cards, cardsLoading, getCardsError } = useSelector((state) => state.getcards);
    const { cardMessages, cardMessagesLoading, getCardMessagesError } = useSelector((state) => state.getcardmessages);
    const { updatedMessage, updatedMessageLoading, updatedMessageError } = useSelector((state) => state.updatemessage);


    const [day, setDay] = useState(true)
    const [selected, setSelected] = useState({
        template: 'default',
        bgImage: false,
        light: '',
        dark: '',
        lightTextColor: '#ffffff',
        darkTextColor: '#030712',
        lightColor: '',
        darkColor: ''
    })
    const [cardTitle, setCardTitle] = useState('')
    const [defaultLayout, setDefaultLayout] = useState(true)
    const [cardId, setCardId] = useState('')
    const [file, setFile] = useState(null);
    const [lightTheme, setLightTheme] = useState('#ffffff')
    const [darkTheme, setDarkTheme] = useState('#030712')
    const [lightText, setLightText] = useState('#ffffff')
    const [darkText, setDarkText] = useState('#030712')
    const [selectedFont, setSelectedFont] = useState('')
    const [editMessage, setEditMessage] = useState('')
    const [selectedCard, setSelectedCard] = useState('')
    const [cardValues, setCardValues] = useState(null)
    const [fontId, setFontId] = useState('')
    const [messageId, setMessageId] = useState('')


    const handleSelect = (event) => {

        let data = event.target.value
        console.log('selected card data: ',typeof data)
        setSelectedCard(data);

        let findCard = cards.filter((item) => (item.card_id === data))

        setCardId(findCard[0]?.card_id)

        setCardValues(findCard[0]?.card_data)

    };

    let validation = Yup.object().shape({
        cardName: Yup.string().required(),
        cardTitle: Yup.string().required(),
        introText: Yup.string().required(),
        coverText: Yup.string().required(),
        birthdayMessage: Yup.string().required(),
    })

    const formik = useFormik({
        enableReinitialize: true,
        initialValues: {
            template: cardValues?.template,
            cardName: cardValues?.cardName,
            cardTitle: cardValues?.cardTitle,
            lightTheme: cardValues?.lightTheme,
            darkTheme: cardValues?.darkTheme,
            titleFont: cardValues?.selectedFont,
            introText: cardValues?.introText,
            coverImage: cardValues?.coverImage,
            lightText: cardValues?.lightText,
            darkText: cardValues?.darkText,
            birthdayMessage: cardValues?.birthdayMessage,
            messages: cardValues?.messages
        },
        validationSchema: validation,
        onSubmit: values => {
            alert(JSON.stringify(values, null, 2));
        }
    });

    const setBlankTheme = () => {
        setSelected({
            ...selected,
            template: 'default',
            bgImage: false,
            light: '',
            dark: '',
            lightTextColor: '#ffffff',
            darkTextColor: '#030712',
            lightColor: '',
            darkColor: ''
        })
        console.log("form values: ", formik.values)
    }

    const setDayNightTheme = () => {
        setSelected({
            ...selected,
            template: 'dayNight',
            bgImage: true,
            light: Day,
            dark: Night,
            lightTextColor: '',
            darkTextColor: '',
            lightColor: '#cee5f0',
            darkColor: '#283038'
        })
        console.log("form values: ", formik.values)
    }

    const handleChange = (e) => {
        console.log(e.target.files);
        setFile(URL.createObjectURL(e.target.files[0]));
    }

    const selectFont = (value) => {
        setFontId(value.id)
        setSelectedFont(value.fontFamily)
    }

    const selectMessage = (value) => {
        console.log("selected value: ", value)
        setEditMessage(value?.message)
        setMessageId(value?.message_id)
    }

    const changeEditMessage = (e) => {
        setEditMessage(e.target.value)
    }

    const cardMessageUpdate = () => {
        console.log('updated message')
        let data = {
            message: editMessage,
            id: messageId
        }
        dispatch(updateCardMessage(data))
    }

    useEffect(() => {
        console.log('selected: ', selected)
    }, [selected])

    useEffect(() => {
        console.log('selected card: ',selectedCard)
    },[selectedCard])

    useEffect(() => {
        setBlankTheme()
    }, [])

    useEffect(() => {
            dispatch(fetchCards(session.user?.id))
    }, [])

    useEffect(() => {
        if (cardId) {
            dispatch(() => {
                dispatch(getCardMessages(cardId))
            })
        }
    }, [cardId])

    useEffect(() => {
        if (getCardMessagesError) {
            toast.error(getCardMessagesError)
        }
    }, [getCardMessagesError])

    useEffect(() => {
        if (fontList) {
            setFontId(fontList[0]?.id)
            setSelectedFont(fontList[0]?.fontFamily)
        }
    }, [])

    useEffect(() => {
        if (cardMessages) {
            setEditMessage(cardMessages[0]?.message)
            setMessageId(cardMessages[0]?.message_id)
        }
    }, [cardMessages])

    useEffect(() => {
        if (updatedMessage?.length > 0) {
            console.log('update response: ', updatedMessage)
            toast.success(updatedMessage)
            dispatch(getCardMessages(cardId))
        }
    }, [updatedMessage])

    useEffect(() => {
        if (updatedMessageError) {
            toast.error(updatedMessageError)
        }
    }, [updatedMessageError])

    const cardlink = `http://localhost:3000/card/${cardId}`
    const previewlink = `http://localhost:3000/preview/${cardId}`
    const link = `http://localhost:3000/message/${cardId}`

    const copyLink = () => {
        clipboard.write(link)
        toast.success('Copied!')
    }

    const openPreview = () => {
        window.open(previewlink)
    }

    useEffect(() => {
        if (cards && cardValues) {
            setLightTheme(cardValues?.lightTheme)
            setDarkTheme(cardValues?.darkTheme)
            setLightText(cardValues?.lightText)
            setDarkText(cardValues?.darkText)
            setSelectedFont(cardValues?.titleFont)
        }
    }, [cards, cardValues])


    return (

        <>
            {preview ?
                <CardPreview cardValues={cardValues} />
                :
                <div className='relative w-full flex flex-col space-y-3 rounded-lg p-4'>

                    <div className='w-full h-24 flex flex-col py-5'>

                        <p className="text-sm/6 text-gray-950">{'Select card'}</p>

                        <div className='w-full h-16 flex flex-row'>

                            <div className='w-1/3 h-full py-1'>
                                {cardsLoading ?
                                    <div className='w-80 h-12 animate-pulse bg-slate-400 rounded'></div>
                                    :
                                    <select value={''} onChange={handleSelect} className='w-80 h-12 rounded-lg px-2 py-1'>
                                        <option value="">--Select--</option>
                                        {cards?.map((card) => (
                                            <option key={card?.card_id} value={card?.card_id}>{card?.card_data.cardName}</option>
                                        ))}
                                    </select>
                                }
                            </div>

                            <div className='w-2/3 h-full py-1 flex flex-row'>
                                {selectedCard &&
                                    <>
                                        <div className='w-96 h-10 flex flex-row p-1 rounded-lg line-clamp-1'>
                                            <p className='line-clamp-1'>{cardlink}</p>
                                        </div>
                                        <button className='w-10 h-10 rounded-lg hover:bg-slate-100' onClick={copyLink}>
                                            <CopyAllOutlined />
                                        </button>
                                    </>
                                }
                            </div>

                        </div>

                    </div>

                    {selectedCard &&
                        <>
                            <CardLayoutForm formik={formik} handleChange={handleChange} backgroundDark={darkTheme}
                                lightTheme={lightTheme} setLightTheme={setLightTheme} selectFont={selectFont} darkTheme={darkTheme}
                                setDarkTheme={setDarkTheme} colorButtonDisabled={selected.template !== 'default'} lightText={lightText}
                                setLightText={setLightText} darkText={darkText} setDarkText={setDarkText} messages={cardMessages}
                                selectMessage={selectMessage} editMessage={editMessage} changeEditMessage={changeEditMessage} messageId={messageId}
                                updatedMessageLoader={updatedMessageLoading} updateCardMessage={cardMessageUpdate} selectedFont={selectedFont}
                                fontId={fontId}
                            />

                            <div className='w-full h-20 flex flex-row py-5'>
                                <div className='w-96 h-10 flex flex-row p-1 rounded-lg line-clamp-1'>
                                    <p className='line-clamp-1'>{link}</p>
                                </div>
                                <button className='w-10 h-10 rounded-lg hover:bg-slate-100' onClick={copyLink}>
                                    <CopyAllOutlined />
                                </button>
                            </div>

                            <div className='w-full h-10 flex flex-row'>
                                <div className='w-1/6 pt-2'>
                                    <p className="text-base text-gray-950">Templates</p>
                                </div>
                                <div className='w-5/6 py-2 flex flex-row'>
                                    <p>Dark Mode</p>
                                    <Switch
                                        checked={!day}
                                        onChange={() => setDay(!day)}
                                        className="group inline-flex h-6 w-11 ml-5 items-center rounded-full bg-gray-200 transition data-[checked]:bg-gray-950"
                                    >
                                        <span className="size-4 translate-x-1 rounded-full bg-white transition group-data-[checked]:translate-x-6" />
                                    </Switch>
                                </div>
                            </div>

                            <div className='w-full flex flex-row py-4 pr-4'>

                                <div className='relative w-1/6 flex flex-col space-y-2'>
                                    <TemplateHolder template={selected.template === 'default'} selectTemplate={setBlankTheme} bgImage={false} day={day} light={''} dark={''} lightColor={lightTheme} darkColor={darkTheme} />
                                    <TemplateHolder template={selected.template === 'dayNight'} selectTemplate={setDayNightTheme} bgImage={true} day={day} light={Day} dark={Night} lightColor={'bg-[#cee5f0]'} darkColor={'bg-[#283038]'} />
                                </div>

                                <div className='relative w-5/6 mb-24'>
                                    <PreviewHolder
                                        bgImage={selected.bgImage} day={day} setDay={() => setDay(!day)} light={selected.light} dark={selected.dark} font={selectedFont}
                                        bgLightColor={selected.template === 'dayNight' ? '#cee5f0' : lightTheme} bgDarkColor={selected.template === 'dayNight' ? '#283038' : darkTheme}
                                        lightTextColor={lightText} darkTextColor={darkText} cardTitle={formik?.values.cardTitle} defaultLayout={defaultLayout}
                                        headerLight={selected.lightColor} headerDark={selected.darkColor} introText={formik?.values.introText} birthdayMessage={formik?.values.birthdayMessage}
                                        messages={cardMessages} template={selected.template} coverImage={file}
                                    />
                                </div>

                            </div>
                        </>
                    }

                    {cardValues &&
                        <button onClick={togglePreview()} type='submit' className="fixed right-8 bottom-8 w-32 h-12 rounded bg-gray-950 py-2 px-4 text-sm mt-14 text-white data-[hover]:bg-gray-800">
                            Preview →
                        </button>
                    }

                </div>
            }
        </>

    )
}

export default NewCard